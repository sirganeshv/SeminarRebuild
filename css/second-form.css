/*
 Values that have set of four values are in the order,

      <top> <right> <bottom> <left>

*/
/* common values */
/* form values */
/* button values */
.form-container {
  width: 90%;
  height: 100%;
  padding: 3% 5%; }
  .form-container form {
    width: 100%;
    height: 100%; }

/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/* values for data table */
@font-face {
  font-family: "Roboto Regular";
  src: url("/fonts/Roboto-Regular.woff") format("woff"); }
@font-face {
  font-family: "Roboto Medium";
  src: url("/fonts/Roboto-Medium.woff") format("woff"); }
/*  reset browser values */
table {
  border-spacing: 0; }
  table th, table td {
    border: 0;
    margin: 0;
    padding: 0;
    border-style: none; }

table {
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);
  width: 100%;
  /* border */
  border-collapse: collapse;
  /* hover effect */
  /* alignment */
  /* checkbox margin */
  /* font values */ }
  table tr {
    border-bottom: 1px solid #E0E0E0; }
  table tbody tr:last-child {
    border-bottom: none; }
  table tbody tr:hover {
    background-color: #EEEEEE; }
  table th, table td {
    box-sizing: border-box;
    vertical-align: middle;
    text-align: left; }
  table .checkbox {
    margin-left: 8px; }
  table th {
    font-weight: normal;
    font-family: "Roboto Medium";
    color: #373737; }
  table td {
    font-family: "Roboto Regular";
    color: #3B3B3B; }

/* overrides as 'mdc-grid' is being used */
.form-container form .form-item {
  width: 100%;
  padding-left: 0; }
.form-container form .form-items {
  padding-left: 0; }

.form-container form .form-item {
  padding: 2%; }
  .form-container form .form-item .form-item-input {
    padding: 2% 1% 1% 0; }
  .form-container form .form-item .form-buttons {
    position: relative; }
    .form-container form .form-item .form-buttons button.back-button {
      margin: 0 0 0 2%;
      background-color: #4b4b4b; }
    .form-container form .form-item .form-buttons button.submit-button {
      position: absolute;
      right: 0;
      margin: 0 2% 0 0; }

/*# sourceMappingURL=second-form.css.map */
